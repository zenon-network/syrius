import 'package:flutter/material.dart';
import 'package:zenon_syrius_wallet_flutter/rearchitecture/utils/utils.dart';
import 'package:zenon_syrius_wallet_flutter/utils/app_colors.dart';
import 'package:zenon_syrius_wallet_flutter/utils/global.dart';

/// A dropdown created from the list of addresses generated by the user
class NewAddressesDropdown extends StatefulWidget {
  /// Creates a new instance.
  const NewAddressesDropdown({
    required List<String> addresses,
    required void Function(String) onSelectedCallback,
    required String selectedAddress,
    super.key,
  })  :
        _addresses = addresses,
        _onSelectedCallback = onSelectedCallback,
        _selectedAddress = selectedAddress;
  final List<String> _addresses;
  final void Function(String) _onSelectedCallback;
  final String _selectedAddress;

  @override
  State<NewAddressesDropdown> createState() => _NewAddressesDropdownState();
}

class _NewAddressesDropdownState extends State<NewAddressesDropdown> {
  final TextEditingController _searchController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    const Color color = AppColors.znnColor;

    final List<DropdownMenuEntry<String>> entries = widget._addresses
        .map(
          (String address) => DropdownMenuEntry<String>(
        label: kAddressLabelMap[address]!,
        style: MenuItemButton.styleFrom(
          foregroundColor: address == widget._selectedAddress ? color : null,
        ),
        value: address,
      ),
    )
        .toList();

    return DropdownMenu<String>(
      controller: _searchController,
      expandedInsets: EdgeInsets.zero,
      initialSelection: widget._selectedAddress,
      inputDecorationTheme: const InputDecorationTheme(
        filled: true,
      ),
      leadingIcon: const Icon(
        Icons.search,
        color: color,
      ),
      dropdownMenuEntries: entries,
      menuHeight: kDropdownMenuHeight,
      onSelected: (String? address) {
        if (address != null) {
          widget._onSelectedCallback(address);
        }
      },
      searchCallback: _searchCallback,
      textStyle: const TextStyle(
        color: color,
      ),
      trailingIcon: const Icon(
        Icons.keyboard_arrow_down_rounded,
        color: color,
      ),
    );
  }

  int? _searchCallback(List<DropdownMenuEntry<String>> entries, String query) {
    final String searchText = query.toLowerCase();
    if (searchText.isEmpty) {
      return null;
    }
    final int index = entries.indexWhere(
          (DropdownMenuEntry<String> entry) => _matchTest(entry, searchText),
    );
    return index != -1 ? index : null;
  }

  bool _matchTest(DropdownMenuEntry<String> entry, String searchText) =>
      entry.label.toLowerCase().contains(searchText) ||
          entry.value.toLowerCase().contains(searchText);
}
